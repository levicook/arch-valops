#!/usr/bin/env bash
#
# titan-lib.sh - Titan-specific utilities for Titan Rune Indexer operations
#
# Sources core utilities and provides titan-specific functions for IaC management

source "$(dirname "${BASH_SOURCE[0]}")/lib.sh"

# This library provides idempotent functions for managing Titan infrastructure:
# - Configuration generation (titan.conf)
# - Network coordination with Bitcoin RPC
# - API server setup
#
# DESIGN PHILOSOPHY:
# - All functions are idempotent (safe for repeated execution)
# - Infrastructure functions only - no process management
# - Systemd handles all process lifecycle
#

# Generate titan environment file for systemd
generate_titan_env() {
    local username="$1"
    local network_mode="$2"

    # Map network modes to titan chain names
    local titan_chain="$network_mode"

    case "$network_mode" in
    testnet)
        titan_chain="testnet"
        ;;
    testnet4)
        titan_chain="testnet4"
        ;;
    signet)
        titan_chain="signet"
        ;;
    regtest)
        titan_chain="regtest"
        ;;
    devnet)
        # For devnet, use regtest mode
        titan_chain="regtest"
        ;;
    main | mainnet)
        titan_chain="mainnet"
        ;;
    esac

    # Use same RPC credentials as Bitcoin (must be provided)
    local rpc_user="${BITCOIN_RPC_USER:-bitcoin}"
    local rpc_password="${BITCOIN_RPC_PASSWORD:-}"

    if [[ -z "$rpc_password" ]]; then
        log_error "BITCOIN_RPC_PASSWORD must be set for Titan to connect to Bitcoin RPC"
        return 1
    fi

    # Generate systemd environment file
    cat <<EOF
# Titan environment file for systemd
# Generated by valops titan-up

BITCOIN_RPC_USER=$rpc_user
BITCOIN_RPC_PASSWORD=$rpc_password
TITAN_NETWORK_MODE=$titan_chain
EOF
}

# Configure Titan API firewall rules
ensure_titan_api_enabled() {
    local username="$1"
    local network_mode="$2"

    # Check if API should be exposed (default: local only for security)
    local enable_public_api="${TITAN_API_PUBLIC:-false}"

    if [[ "$enable_public_api" != "true" ]]; then
        log_echo "ℹ Titan API local only (TITAN_API_PUBLIC=false)"
        log_echo "  → API available at http://127.0.0.1:3030 (secure default)"
        return 0
    fi

    local api_port="3030"

    # Check if ufw is installed and active
    if ! command -v ufw >/dev/null 2>&1; then
        log_echo "⚠ UFW not installed, skipping API firewall configuration"
        return 0
    fi

    # Get current ufw status
    local ufw_status=$(sudo ufw status | head -1 | awk '{print $2}')

    if [ "$ufw_status" = "active" ]; then
        log_echo "UFW is active, enabling Titan API port $api_port..."

        # Check if API port is already allowed
        if ! sudo ufw status numbered | grep -q "$api_port/tcp"; then
            sudo ufw allow "$api_port/tcp" comment "Titan API ($network_mode)" >/dev/null 2>&1 || true
            log_echo "✓ Opened Titan API port $api_port"
            log_echo "  ⚠ API now publicly accessible - ensure proper security"
        else
            log_echo "✓ Titan API port $api_port already allowed"
        fi
    else
        log_echo "✓ UFW not active, no API firewall configuration needed"
    fi
}
