#!/bin/bash
#
# backup-passwords - Create encrypted backups of all validator passwords
#
# Creates encrypted backups in ~/.valops/age/{devnet,mainnet,testnet}/ directory structure.
# Automatically discovers and backs up ALL .env.passwords files from validator environments.
# Backup files can be restored to reconstruct validator password configuration on same or different host.
#
# Usage:
#   backup-passwords
#
# What it does:
# - Finds all .env.passwords files in validators/{devnet,mainnet,testnet}/
# - Encrypts each with host's age public key
# - Saves as ~/.valops/age/{environment}/.env.passwords.age
# - Idempotent: won't overwrite existing backups
# - Reports summary of successful/failed backups
#
set -euo pipefail
source "$(dirname "$0")/lib.sh"

log_echo() {
    echo "backup-passwords: $@"
}

usage() {
    echo "Usage: backup-passwords [options]"
    echo ""
    echo "Options:"
    echo "  -h, --help                       Show this help"
    echo ""
    echo "What it does:"
    echo "  - Discovers .env.passwords files in validators/{devnet,mainnet,testnet}/"
    echo "  - Encrypts each file using age with host public key"
    echo "  - Saves as ~/.valops/age/{environment}/.env.passwords.age"
    echo "  - Creates directory structure mirroring validators/"
    echo ""
    echo "Restore with:"
    echo "  age -d -i ~/.valops/age/host-identity.key ~/.valops/age/testnet/.env.passwords.age > validators/testnet/.env.passwords"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
        usage
        exit 0
        ;;
    *)
        echo "backup-passwords: Unknown option: $1"
        echo "backup-passwords: Use --help for usage information"
        exit 1
        ;;
    esac
done

# Check prerequisites
if ! command -v age >/dev/null 2>&1; then
    log_echo "✗ age binary not found. Install with: sudo apt install age"
    exit 1
fi

AGE_DIR="$HOME/.valops/age"
if [[ ! -f "$AGE_DIR/host-identity.pub" ]]; then
    log_echo "✗ Age keys not found. Run: setup-age-keys first"
    exit 1
fi

PROJECT_ROOT="$(cd "$(dirname "$0")/.." && pwd)"
VALIDATORS_DIR="$PROJECT_ROOT/validators"

if [[ ! -d "$VALIDATORS_DIR" ]]; then
    log_echo "✗ Validators directory not found: $VALIDATORS_DIR"
    exit 1
fi

# Create backup directory structure
mkdir -p "$AGE_DIR"

backup_count=0
skip_count=0

log_echo "Scanning for .env.passwords files in validator environments..."

# Iterate through validator environments
for env_dir in "$VALIDATORS_DIR"/*; do
    if [[ ! -d "$env_dir" ]]; then
        continue
    fi

    env_name="$(basename "$env_dir")"
    password_file="$env_dir/.env.passwords"

    if [[ ! -f "$password_file" ]]; then
        log_echo "  $env_name: No .env.passwords file found"
        continue
    fi

    # Create environment directory in age backup location
    backup_env_dir="$AGE_DIR/$env_name"
    mkdir -p "$backup_env_dir"

    backup_file="$backup_env_dir/.env.passwords.age"

    # Check if backup already exists
    if [[ -f "$backup_file" ]]; then
        log_echo "  $env_name: Backup already exists, skipping"
        skip_count=$((skip_count + 1))
        continue
    fi

    # Create encrypted backup
    if age -r "$(cat "$AGE_DIR/host-identity.pub")" -o "$backup_file" "$password_file"; then
        chmod 600 "$backup_file"
        log_echo "  $env_name: ✓ Encrypted backup created"
        backup_count=$((backup_count + 1))
    else
        log_echo "  $env_name: ✗ Failed to create backup"
    fi
done

log_echo ""
log_echo "✓ Password backup complete"
log_echo "  Created: $backup_count backups"
log_echo "  Skipped: $skip_count existing backups"
log_echo ""
log_echo "Backup structure:"
log_echo "  ~/.valops/age/{devnet,mainnet,testnet}/.env.passwords.age"
log_echo ""
log_echo "Restore example:"
log_echo "  age -d -i ~/.valops/age/host-identity.key ~/.valops/age/testnet/.env.passwords.age > validators/testnet/.env.passwords"
