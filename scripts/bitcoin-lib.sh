#!/usr/bin/env bash
#
# bitcoin-lib.sh - Bitcoin-specific utilities for Bitcoin Core operations
#
# Sources core utilities and provides bitcoin-specific functions for IaC management

source "$(dirname "${BASH_SOURCE[0]}")/lib.sh"

# This library provides idempotent functions for managing Bitcoin Core infrastructure:
# - Configuration generation (bitcoin.conf)
# - Firewall configuration (P2P ports)
# - Operational features (banlist application)
#
# DESIGN PHILOSOPHY:
# - All functions are idempotent (safe for repeated execution)
# - Infrastructure functions only - no process management
# - Systemd handles all process lifecycle
#

# Generate bitcoin configuration
generate_bitcoin_config() {
    local username="$1"
    local network_mode="$2"
    local prune_size="$3"  # Optional: MB to keep, "0" or "false" for no pruning
    local data_dir="/home/$username/data"
    local rpc_port="8332"
    local p2p_port="8333"

    # Adjust ports and chain name based on network
    local bitcoin_chain="$network_mode"
    case "$network_mode" in
    testnet)
        bitcoin_chain="test"
        rpc_port="18332"
        p2p_port="18333"
        ;;
    testnet4)
        bitcoin_chain="testnet4"
        rpc_port="48332"
        p2p_port="48333"
        ;;
    signet)
        bitcoin_chain="signet"
        rpc_port="38332"
        p2p_port="38333"
        ;;
    regtest)
        bitcoin_chain="regtest"
        rpc_port="18443"
        p2p_port="18444"
        ;;
    devnet)
        # For devnet, use regtest mode
        bitcoin_chain="regtest"
        rpc_port="18443"
        p2p_port="18444"
        ;;
    main|mainnet)
        bitcoin_chain="main"
        rpc_port="8332"
        p2p_port="8333"
        ;;
    esac

    # Use configurable RPC credentials (must be provided)
    local rpc_user="${BITCOIN_RPC_USER:-bitcoin}"
    local rpc_password="${BITCOIN_RPC_PASSWORD:-}"

    if [[ -z "$rpc_password" ]]; then
        log_error "BITCOIN_RPC_PASSWORD must be set"
        return 1
    fi

    cat <<EOF
# Bitcoin Core configuration
# Generated by valops bitcoin-init

# Network configuration
chain=$bitcoin_chain
datadir=$data_dir

# Global settings
server=1
dbcache=512
maxconnections=125
maxuploadtarget=0
debug=0
logtimestamps=1
disablewallet=1
listen=1
discover=1

# Disk space management
$(if [[ -n "${prune_size:-}" && "${prune_size}" != "0" && "${prune_size}" != "false" ]]; then
    echo "prune=${prune_size}  # Keep ~${prune_size}MB of recent blocks"
fi)

# Network-specific settings
$(if [ "$bitcoin_chain" != "main" ]; then
    echo "[$bitcoin_chain]"
fi)
rpcbind=127.0.0.1
rpcport=$rpc_port
rpcuser=$rpc_user
rpcpassword=$rpc_password
port=$p2p_port
EOF
}

# Configure Bitcoin P2P firewall rules (similar to ensure_gossip_enabled for validators)
ensure_bitcoin_p2p_enabled() {
    local username="$1"
    local network_mode="$2"

    # Check if P2P should be enabled (default: disabled for security)
    local enable_p2p="${BITCOIN_P2P_ENABLED:-false}"

    if [[ "$enable_p2p" != "true" ]]; then
        log_echo "ℹ Bitcoin P2P disabled (BITCOIN_P2P_ENABLED=false)"
        log_echo "  → Outbound-only operation (secure for validators)"
        return 0
    fi

    # Determine P2P port based on network
    local p2p_port="8333"
    case "$network_mode" in
    testnet)
        p2p_port="18333"
        ;;
    testnet4)
        p2p_port="48333"
        ;;
    signet)
        p2p_port="38333"
        ;;
    regtest|devnet)
        p2p_port="18444"
        ;;
    main|mainnet)
        p2p_port="8333"
        ;;
    esac

    # Check if ufw is installed and active
    if ! command -v ufw >/dev/null 2>&1; then
        log_echo "⚠ UFW not installed, skipping P2P firewall configuration"
        return 0
    fi

    # Get current ufw status
    local ufw_status=$(sudo ufw status | head -1 | awk '{print $2}')

    if [ "$ufw_status" = "active" ]; then
        log_echo "UFW is active, enabling Bitcoin P2P port $p2p_port..."

        # Check if P2P port is already allowed
        if ! sudo ufw status numbered | grep -q "$p2p_port/tcp"; then
            sudo ufw allow "$p2p_port/tcp" comment "Bitcoin P2P port ($network_mode)" >/dev/null 2>&1 || true
            log_echo "✓ Opened Bitcoin P2P port $p2p_port"
            log_echo "  → Can now accept inbound peer connections"
        else
            log_echo "✓ Bitcoin P2P port $p2p_port already allowed"
        fi
    else
        log_echo "✓ UFW not active, no P2P firewall configuration needed"
    fi
}

# Apply Bitcoin Knots banlist to prevent restrictive relay policies
apply_knots_banlist() {
    local username="$1"
    local home_dir="/home/$username"
    local banlist_file="$home_dir/banlist.json"

    # Check if Knots banlist should be applied (default: enabled for better relay)
    local enable_banlist="${BITCOIN_KNOTS_BANLIST:-true}"

    if [[ "$enable_banlist" != "true" ]]; then
        log_echo "ℹ Bitcoin Knots banlist disabled (BITCOIN_KNOTS_BANLIST=false)"
        return 0
    fi

    log_echo "Applying Bitcoin Knots banlist for better relay policies..."

    # Download latest banlist from GitHub
    local banlist_url="https://raw.githubusercontent.com/aeonBTC/Knots-Banlist/main/banlist.json"

    if command -v curl >/dev/null 2>&1; then
        if curl -s -f "$banlist_url" -o "/tmp/banlist.json.tmp" 2>/dev/null; then
            # Verify it's valid JSON
            if jq empty "/tmp/banlist.json.tmp" 2>/dev/null; then
                sudo mv "/tmp/banlist.json.tmp" "$banlist_file"
                sudo chown "$username:$username" "$banlist_file"
                sudo chmod 600 "$banlist_file"

                # Count banned addresses
                local ban_count=$(jq 'length' "$banlist_file" 2>/dev/null || echo "unknown")
                log_echo "✓ Applied Bitcoin Knots banlist ($ban_count addresses banned)"
                log_echo "  → Prevents restrictive relay policies that affect fee estimation"
            else
                log_echo "⚠ Downloaded banlist is not valid JSON, skipping"
                rm -f "/tmp/banlist.json.tmp"
            fi
        else
            log_echo "⚠ Failed to download Bitcoin Knots banlist from GitHub"
        fi
    else
        log_echo "⚠ curl not available, cannot download Bitcoin Knots banlist"
    fi
}