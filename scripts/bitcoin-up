#!/bin/bash
#
# bitcoin-up - Bitcoin Core IaC Management
#
# Ensures Bitcoin Core infrastructure exists and service is running.
# This is an Infrastructure as Code (IaC) tool - it declares desired state
# and ensures reality matches that state.
#
# Usage:
#   BITCOIN_USER=testnet-bitcoin bitcoin-up
#   bitcoin-up --user testnet-bitcoin
#
set -euo pipefail
source "$(dirname "$0")/lib.sh"
source "$(dirname "$0")/bitcoin-lib.sh"

log_echo() {
    echo "bitcoin-up: $@"
}

# Declare desired state
declare_bitcoin_state() {
    # Initialize from environment variables (no defaults - envrc handles those)
    BITCOIN_USER="${BITCOIN_USER:-}"
    BITCOIN_NETWORK_MODE="${BITCOIN_NETWORK_MODE:-}"

    # Parse command line arguments (override environment variables)
    while [[ $# -gt 0 ]]; do
        case $1 in
        --user)
            BITCOIN_USER="$2"
            shift 2
            ;;
        --network)
            BITCOIN_NETWORK_MODE="$2"
            shift 2
            ;;
        -h | --help)
            echo "Usage: bitcoin-up [options]"
            echo ""
            echo "Environment Variables (recommended):"
            echo "  BITCOIN_USER                     Bitcoin user account"
            echo "  BITCOIN_NETWORK_MODE             Network (testnet|mainnet|regtest|signet)"
            echo ""
            echo "Options (override environment variables):"
            echo "  --user <username>                Bitcoin user account"
            echo "  --network <network>              Network mode"
            echo "  -h, --help                       Show this help"
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            exit 1
            ;;
        esac
    done

    # Validate required parameters
    if [[ -z "$BITCOIN_USER" ]]; then
        log_error "BITCOIN_USER environment variable or --user flag is required"
        echo "Usage: BITCOIN_USER=testnet-bitcoin bitcoin-up"
        echo "   or: bitcoin-up --user testnet-bitcoin"
        exit 1
    fi

    if [[ -z "$BITCOIN_NETWORK_MODE" ]]; then
        log_error "BITCOIN_NETWORK_MODE environment variable or --network flag is required"
        echo "Set in envrc or pass --network (testnet|mainnet|regtest|signet)"
        exit 1
    fi

    log_echo "Desired state: user=$BITCOIN_USER, network=$BITCOIN_NETWORK_MODE"
}

# Ensure all infrastructure exists and is current
ensure_bitcoin_infrastructure() {
    log_echo "Ensuring Bitcoin infrastructure exists and is current..."

    # Core infrastructure
    create_user "$BITCOIN_USER"
    ensure_service_directories "$BITCOIN_USER" "data" "logs"

    # Service management
    ensure_systemd_service_unit_installed "arch-bitcoind@"

    # Configuration (reuse existing function)
    ensure_bitcoin_configuration_current "$BITCOIN_USER" "$BITCOIN_NETWORK_MODE"

    # Operational concerns
    ensure_logrotate_enabled "$BITCOIN_USER" "bitcoin"
    ensure_bitcoin_p2p_enabled "$BITCOIN_USER" "$BITCOIN_NETWORK_MODE"
    apply_knots_banlist "$BITCOIN_USER"

    log_echo "✓ Bitcoin infrastructure is current"
}

# Ensure configuration file is current
ensure_bitcoin_configuration_current() {
    local username="$1"
    local network_mode="$2"
    local config_file="/home/$username/bitcoin.conf"

    # Generate current config and compare
    local temp_config=$(mktemp)
    trap "rm -f '$temp_config'" EXIT

    generate_bitcoin_config "$username" "$network_mode" >"$temp_config"

    # Update if different or missing
    if [[ ! -f "$config_file" ]] || ! cmp -s "$temp_config" "$config_file" 2>/dev/null; then
        log_echo "Updating Bitcoin configuration..."
        sudo cp "$temp_config" "$config_file"
        sudo chown "$username:$username" "$config_file"
        sudo chmod 600 "$config_file"
        log_echo "✓ Bitcoin configuration updated"
    fi
}

# Ensure service is running and healthy
ensure_service_running() {
    local service_name="arch-bitcoind@$BITCOIN_USER"

    # Start service if not running
    if ! is_systemd_service_running "$service_name"; then
        log_echo "Starting Bitcoin service..."
        sudo systemctl start "$service_name"
        log_echo "✓ Bitcoin service started"
    else
        log_echo "✓ Bitcoin service already running"
    fi

    # Wait for RPC to be ready
    local rpc_check="sudo -u $BITCOIN_USER bitcoin-cli -conf=/home/$BITCOIN_USER/bitcoin.conf getblockchaininfo"
    wait_for_service_ready "$service_name" "$rpc_check" 30

    # Verify health
    verify_bitcoin_healthy "$BITCOIN_USER"
}

# Verify service is healthy and report status
verify_bitcoin_healthy() {
    local username="$1"
    local config_file="/home/$username/bitcoin.conf"

    log_echo "Verifying Bitcoin service health..."

    # Get blockchain info for verification
    if ! sudo -u "$username" bitcoin-cli -conf="$config_file" getblockchaininfo >/dev/null 2>&1; then
        log_error "✗ Bitcoin RPC not responding"
        return 1
    fi

    # Show basic status
    local blockcount=$(sudo -u "$username" bitcoin-cli -conf="$config_file" getblockcount 2>/dev/null || echo "unknown")
    local chainname=$(sudo -u "$username" bitcoin-cli -conf="$config_file" getblockchaininfo 2>/dev/null | jq -r '.chain' 2>/dev/null || echo "unknown")

    log_echo "✓ Bitcoin service is healthy"
    log_echo "  Network: $chainname"
    log_echo "  Block count: $blockcount"
    log_echo "  Status: systemctl status arch-bitcoind@$username"
    log_echo "  Logs: journalctl -u arch-bitcoind@$username -f"
}

# Main execution: IaC pattern
main() {
    declare_bitcoin_state "$@"
    ensure_bitcoin_infrastructure
    ensure_service_running

    log_echo "✓ Bitcoin Core infrastructure is ready and running"
}

# Execute main function with all arguments
main "$@"
