#!/bin/bash
#
# sync-bins - Binary synchronization from development VM
#
# Synchronizes Arch Network binaries from multipass dev-env VM to bare metal.
# Uses SCP for reliable transfer and only updates when files change.
#
# What it does:
# - Connects to multipass 'dev-env' VM via SCP
# - Syncs arch-cli and validator binaries to /usr/local/bin/
# - Only overwrites files that have changed (efficient)
#
# Idempotent: Safe to run multiple times
# Dependencies: 
# - Multipass dev-env VM must be running
# - SSH access to VM configured  
# - Source binaries must exist in VM
#
set -euo pipefail
source "$(dirname "$0")/common.sh"
cd "$PROJECT_ROOT"

# Function for consistent output
log_echo() {
    echo "sync-bins: $@"
}

# Function for error output
log_error() {
    echo "sync-bins: $@" >&2
}

VM_NAME="${VM_NAME:-dev-env}"
VM_IP=$(multipass info "$VM_NAME" | grep IPv4 | awk '{print $2}')

# Function to sync a binary from the VM
sync_bin() {
    local source_path="$1"
    local binary_name=$(basename "$source_path")
    local target_path="/usr/local/bin/$binary_name"

    local temp_dir=$(mktemp -d)
    local temp_file="$temp_dir/$binary_name"

    log_echo "Syncing $binary_name from $VM_NAME ($VM_IP)..."

    if scp "ubuntu@$VM_IP:$source_path" "$temp_file"; then
        if ! cmp -s "$temp_file" "$target_path" 2>/dev/null; then
            sudo cp "$temp_file" "$target_path"
            sudo chmod +x "$target_path"
            log_echo "✓ Updated $binary_name binary"
        else
            log_echo "✓ $binary_name is up to date"
        fi
    else
        log_error "✗ Failed to transfer $binary_name"
        rm -rf "$temp_dir"
        return 1
    fi

    rm -rf "$temp_dir"
}

# Sync binaries
sync_bin "/home/ubuntu/arch-network/target/release/arch-cli"
sync_bin "/home/ubuntu/arch-network/target/release/validator"

log_echo "✓ Sync complete!"
