#!/bin/bash
#
# bitcoin-up - Bitcoin Core IaC Management
#
# Ensures Bitcoin Core infrastructure exists and service is running.
# This is an Infrastructure as Code (IaC) tool - it declares desired state
# and ensures reality matches that state.
#
# Usage:
#   BITCOIN_USER=testnet-bitcoin bitcoin-up
#   bitcoin-up --user testnet-bitcoin
#
set -euo pipefail
source "$(dirname "$0")/../libs/lib.sh"
source "$(dirname "$0")/../libs/bitcoin-lib.sh"

log_echo() {
    echo "bitcoin-up: $@"
}

# Usage information
usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS]

Ensures Bitcoin infrastructure exists and starts the Bitcoin service.

Options:
    -h, --help      Show this help message

Environment Variables (set by .envrc):
    BITCOIN_USER            Username for Bitcoin service
    BITCOIN_DATA_DIR        Directory for Bitcoin blockchain data
    BITCOIN_NETWORK_MODE    Network mode (mainnet, testnet, regtest, etc.)
    BITCOIN_PRUNE_SIZE      Pruning size in MB (0 or false to disable)
    BITCOIN_RPC_USER        RPC username
    BITCOIN_RPC_PASSWORD    RPC password

Examples:
    $(basename "$0")                    # Start with default configuration

EOF
}

# Ensure all infrastructure exists and is current
ensure_bitcoin_infrastructure() {
    local bitcoin_user="$1"
    local bitcoin_network_mode="$2"
    local bitcoin_prune_size="$3"
    local bitcoin_data_dir="$4"

    log_echo "Ensuring Bitcoin infrastructure exists and is current..."

    # Core infrastructure
    create_user "$bitcoin_user"

    # Handle data directory
    ensure_bitcoin_data_directory "$bitcoin_user" "$bitcoin_data_dir"

    # Standard directories (logs always in home)
    ensure_service_directories "$bitcoin_user" "logs"

    # Service management
    ensure_systemd_service_unit_installed "arch-bitcoind@"

    # Configuration (pass data directory)
    ensure_bitcoin_configuration_current "$bitcoin_user" "$bitcoin_network_mode" "$bitcoin_prune_size" "$bitcoin_data_dir"

    # Operational concerns
    ensure_logrotate_enabled "$bitcoin_user" "bitcoin"
    ensure_bitcoin_p2p_enabled "$bitcoin_user" "$bitcoin_network_mode"
    apply_knots_banlist "$bitcoin_user"

    log_echo "✓ Bitcoin infrastructure is current"
}

# Ensure Bitcoin data directory exists with proper permissions
ensure_bitcoin_data_directory() {
    local username="$1"
    local data_dir="$2"

    log_echo "Ensuring Bitcoin data directory: $data_dir"

    # Create directory if it doesn't exist
    if [[ ! -d "$data_dir" ]]; then
        sudo mkdir -p "$data_dir"
        log_echo "✓ Created data directory: $data_dir"
    fi

    # Set proper ownership and permissions
    sudo chown "$username:$username" "$data_dir"
    sudo chmod 750 "$data_dir"
    log_echo "✓ Set permissions for $data_dir"
}

# Ensure configuration file is current
ensure_bitcoin_configuration_current() {
    local username="$1"
    local network_mode="$2"
    local prune_size="$3"
    local data_dir="$4"
    local config_file="/home/$username/bitcoin.conf"

    # Validate required parameters
    if [[ -z "$data_dir" ]]; then
        log_error "data_dir parameter is required"
        return 1
    fi

    # Generate current config and compare
    local temp_config=$(mktemp)
    trap "rm -f '$temp_config'" EXIT

    generate_bitcoin_config "$username" "$network_mode" "$prune_size" "$data_dir" >"$temp_config"

    # Update if different or missing
    if [[ ! -f "$config_file" ]] || ! cmp -s "$temp_config" "$config_file" 2>/dev/null; then
        log_echo "Updating Bitcoin configuration..."
        sudo cp "$temp_config" "$config_file"
        sudo chown "$username:$username" "$config_file"
        sudo chmod 600 "$config_file"
        log_echo "✓ Bitcoin configuration updated"
    fi
}

# Ensure service is running and healthy
ensure_service_running() {
    local bitcoin_user="$1"
    local service_name="arch-bitcoind@$bitcoin_user"

    # Start service if not running
    if ! is_systemd_service_running "$service_name"; then
        log_echo "Starting Bitcoin service..."
        sudo systemctl start "$service_name"
        log_echo "✓ Bitcoin service started"
    else
        log_echo "✓ Bitcoin service already running"
    fi

    # Wait for RPC to be ready
    local rpc_check="sudo -u $bitcoin_user bitcoin-cli -conf=/home/$bitcoin_user/bitcoin.conf getblockchaininfo"
    wait_for_service_ready "$service_name" "$rpc_check" 30

    # Verify health
    verify_bitcoin_healthy "$bitcoin_user"
}

# Verify service is healthy and report status
verify_bitcoin_healthy() {
    local username="$1"
    local config_file="/home/$username/bitcoin.conf"

    log_echo "Verifying Bitcoin service health..."

    # Get blockchain info for verification
    if ! sudo -u "$username" bitcoin-cli -conf="$config_file" getblockchaininfo >/dev/null 2>&1; then
        log_error "✗ Bitcoin RPC not responding"
        return 1
    fi

    # Show basic status
    local blockcount=$(sudo -u "$username" bitcoin-cli -conf="$config_file" getblockcount 2>/dev/null || echo "unknown")
    local chainname=$(sudo -u "$username" bitcoin-cli -conf="$config_file" getblockchaininfo 2>/dev/null | jq -r '.chain' 2>/dev/null || echo "unknown")

    log_echo "✓ Bitcoin service is healthy"
    log_echo "  Network: $chainname"
    log_echo "  Block count: $blockcount"
    log_echo "  Status: systemctl status arch-bitcoind@$username"
    log_echo "  Logs: journalctl -u arch-bitcoind@$username -f"
}

# Main execution: IaC pattern
main() {
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
        -h | --help)
            usage
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            usage
            exit 1
            ;;
        esac
    done

    # Validate required environment variables
    local missing_vars=()

    [[ -z "${BITCOIN_USER:-}" ]] && missing_vars+=("BITCOIN_USER")
    [[ -z "${BITCOIN_DATA_DIR:-}" ]] && missing_vars+=("BITCOIN_DATA_DIR")
    [[ -z "${BITCOIN_NETWORK_MODE:-}" ]] && missing_vars+=("BITCOIN_NETWORK_MODE")
    [[ -z "${BITCOIN_RPC_USER:-}" ]] && missing_vars+=("BITCOIN_RPC_USER")
    [[ -z "${BITCOIN_RPC_PASSWORD:-}" ]] && missing_vars+=("BITCOIN_RPC_PASSWORD")

    if [[ ${#missing_vars[@]} -gt 0 ]]; then
        log_error "Missing required environment variables: ${missing_vars[*]}"
        log_error "These should be set by .envrc - ensure direnv is working"
        usage
        exit 1
    fi

    # Log configuration
    log_echo "Bitcoin service configuration:"
    log_echo "  User: $BITCOIN_USER"
    log_echo "  Data directory: $BITCOIN_DATA_DIR"
    log_echo "  Network: $BITCOIN_NETWORK_MODE"
    log_echo "  Pruning: ${BITCOIN_PRUNE_SIZE:-disabled}"

    # Execute infrastructure setup with explicit parameters
    ensure_bitcoin_infrastructure "$BITCOIN_USER" "$BITCOIN_NETWORK_MODE" "${BITCOIN_PRUNE_SIZE:-}" "$BITCOIN_DATA_DIR"
    ensure_service_running "$BITCOIN_USER"

    # Auto-backup after successful start
    "$PROJECT_ROOT/bin/backup-all"
}

# Execute main function with all arguments
main "$@"
