#!/bin/bash
#
# restore-passwords - Restore encrypted password backups to validator environments
#
# Restores encrypted backups from ~/.valops/age/{devnet,mainnet,testnet}/ back to validators/ directories.
# Automatically discovers and restores ALL .env.passwords.age files found in age backup structure.
# Used for setting up validator environments on same or different host after backup-passwords.
#
# Usage:
#   restore-passwords [options]
#
# What it does:
# - Finds all .env.passwords.age files in ~/.valops/age/{devnet,mainnet,testnet}/
# - Decrypts each with host's age private key
# - Restores as validators/{environment}/.env.passwords
# - Idempotent: won't overwrite existing password files (use --force to override)
# - Reports summary of successful/failed restores
#
set -euo pipefail
source "$(dirname "$0")/../libs/lib.sh"

log_echo() {
    echo "restore-passwords: $@"
}

usage() {
    echo "Usage: restore-passwords [options]"
    echo ""
    echo "Options:"
    echo "  --force                          Overwrite existing password files"
    echo "  -h, --help                       Show this help"
    echo ""
    echo "What it does:"
    echo "  - Discovers .env.passwords.age files in ~/.valops/age/{devnet,mainnet,testnet}/"
    echo "  - Decrypts each file using age with host private key"
    echo "  - Restores as validators/{environment}/.env.passwords"
    echo "  - By default, skips existing files (use --force to overwrite)"
    echo ""
    echo "Examples:"
    echo "  restore-passwords                 # Restore all, skip existing"
    echo "  restore-passwords --force         # Restore all, overwrite existing"
}

FORCE_OVERWRITE=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
    --force)
        FORCE_OVERWRITE=true
        shift
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    *)
        echo "restore-passwords: Unknown option: $1"
        echo "restore-passwords: Use --help for usage information"
        exit 1
        ;;
    esac
done

# Check prerequisites
if ! command -v age >/dev/null 2>&1; then
    log_echo "âœ— age binary not found. Install with: sudo apt install age"
    exit 1
fi

AGE_DIR="$HOME/.valops/age"
if [[ ! -f "$AGE_DIR/host-identity.key" ]]; then
    log_echo "âœ— Age private key not found. Ensure ~/.valops/age/host-identity.key exists"
    exit 1
fi

PROJECT_ROOT="$(cd "$(dirname "$0")/.." && pwd)"
VALIDATORS_DIR="$PROJECT_ROOT/validators"

if [[ ! -d "$VALIDATORS_DIR" ]]; then
    log_echo "âœ— Validators directory not found: $VALIDATORS_DIR"
    exit 1
fi

restore_count=0
skip_count=0
fail_count=0

log_echo "Scanning for .env.passwords.age files in age backup structure..."

# Iterate through age backup environments
for backup_env_dir in "$AGE_DIR"/*; do
    if [[ ! -d "$backup_env_dir" ]]; then
        continue
    fi

    env_name="$(basename "$backup_env_dir")"
    backup_file="$backup_env_dir/.env.passwords.age"

    # Skip if not a password backup file
    if [[ ! -f "$backup_file" ]]; then
        continue
    fi

    target_dir="$VALIDATORS_DIR/$env_name"
    target_file="$target_dir/.env.passwords"

    # Check if target environment directory exists
    if [[ ! -d "$target_dir" ]]; then
        log_echo "  $env_name: Target environment directory not found, skipping"
        continue
    fi

    # Check if target file already exists
    if [[ -f "$target_file" ]] && [[ "$FORCE_OVERWRITE" == "false" ]]; then
        log_echo "  $env_name: Password file already exists, skipping (use --force to overwrite)"
        skip_count=$((skip_count + 1))
        continue
    fi

    # Decrypt and restore
    if age -d -i "$AGE_DIR/host-identity.key" "$backup_file" >"$target_file"; then
        chmod 600 "$target_file"
        log_echo "  $env_name: âœ“ Password file restored"
        restore_count=$((restore_count + 1))
    else
        log_echo "  $env_name: âœ— Failed to restore password file"
        fail_count=$((fail_count + 1))
        # Clean up partial file on failure
        [[ -f "$target_file" ]] && rm -f "$target_file"
    fi
done

log_echo ""
log_echo "âœ“ Password restore complete"
log_echo "  Restored: $restore_count files"
log_echo "  Skipped: $skip_count existing files"
if [[ $fail_count -gt 0 ]]; then
    log_echo "  Failed: $fail_count files"
fi
log_echo ""
if [[ $skip_count -gt 0 ]] && [[ "$FORCE_OVERWRITE" == "false" ]]; then
    log_echo "ðŸ’¡ Use --force to overwrite existing password files"
fi
