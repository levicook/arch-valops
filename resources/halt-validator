#!/bin/bash
set -euo pipefail

# Ensure we're running from the user's home directory
cd "$HOME"

# Log file for all output
LOG_FILE="$HOME/logs/validator.log"

# Function to log and echo
log_echo() {
    echo "halt-validator: $@" | tee -a "$LOG_FILE"
}

# Function to check if process is still running
is_running() {
    local pid="$1"
    kill -0 "$pid" 2>/dev/null
}

# Function to find all validator processes
find_validator_pids() {
    pgrep -f "validator --network-mode" || echo ""
}

# Find all validator processes
VALIDATOR_PIDS=$(find_validator_pids)

if [[ -z "$VALIDATOR_PIDS" ]]; then
    log_echo "✓ No validator processes found running"
    exit 0
fi

log_echo "Found validator process(es): $VALIDATOR_PIDS"
log_echo "$(date): Stopping Arch validator..."

for PID in $VALIDATOR_PIDS; do
    log_echo "Stopping process $PID..."
    
    # Step 1: Graceful shutdown with SIGTERM
    log_echo "  Sending SIGTERM for graceful shutdown..."
    kill -TERM "$PID" 2>/dev/null || true
    
    # Wait up to 15 seconds for graceful shutdown
    for i in {1..15}; do
        if ! is_running "$PID"; then
            log_echo "  ✓ Process $PID stopped gracefully"
            continue 2  # Next PID
        fi
        echo -n "." | tee -a "$LOG_FILE"
        sleep 1
    done
    
    echo "" | tee -a "$LOG_FILE"
    log_echo "  Process $PID didn't stop gracefully, sending SIGKILL..."
    kill -KILL "$PID" 2>/dev/null || true
    
    # Wait up to 5 seconds for SIGKILL
    for i in {1..5}; do
        if ! is_running "$PID"; then
            log_echo "  ✓ Process $PID stopped (forced)"
            continue 2  # Next PID
        fi
        sleep 1
    done
    
    # Step 3: Nuclear option - try with sudo
    log_echo "  Process $PID is stubborn, trying with sudo..."
    sudo kill -KILL "$PID" 2>/dev/null || true
    
    # Final wait
    for i in {1..5}; do
        if ! is_running "$PID"; then
            log_echo "  ✓ Process $PID stopped (sudo forced)"
            continue 2  # Next PID
        fi
        sleep 1
    done
    
    log_echo "  ✗ Failed to stop process $PID (may be in uninterruptible state)"
done

# Final check - see what's left
REMAINING_PIDS=$(find_validator_pids)
if [[ -z "$REMAINING_PIDS" ]]; then
    log_echo "✓ All validator processes stopped"
    log_echo "$(date): All validator processes stopped"
    exit 0
else
    log_echo "✗ Some validator processes still running: $REMAINING_PIDS"
    log_echo "$(date): Failed to stop some validator processes: $REMAINING_PIDS"
    log_echo "These processes may be in an uninterruptible state (D state)"
    log_echo "You may need to restart the system or wait for them to exit naturally"
    exit 1
fi
